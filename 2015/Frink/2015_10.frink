// Solution for 2015 Day 10: Elves Look, Elves Say
// https://adventofcode.com/2015/day/10
// Written in Frink by Chris Hansen
// Website: https://circuitsandcode.wehappyfew.net/
// Twitter: https://twitter.com/CircuitsAndCode
// Github: https://github.com/circuitsandcode
// MIT License: https://github.com/circuitsandcode/AdventOfCode/blob/master/LICENSE

start = now[]

// Import the input file using the read function. This will import the file into a single string.
// The input string is relative to my frink.jar file. Adjust this to the absolute or relative path with your input file.
LookAndSayStarter = read["file:../Projects/AdventOfCode/2015/InputFiles/2015_10_input.txt"]
println["Starting Value: " + LookAndSayStarter]
start = now[]

/*
Anonymous function
   There was an issue processing a standard function with MapList in a prior version of Frink.
   However, the anonymous function works without issue with the MapList function.
*/
LASStr = { |LaS|
   length[LaS@0] + length[LaS@1] + LaS@0
   /*
      The returned results from the Regex are divided between a distinct matching
      character and any following identical characters. For example, a string
      of 2222 would be returned from this function as [2,222].
      The function adds the length of both elements (1 and 3 in the example
      above) and returns that value with the matching character.
      i.e. Length of 1st element = 1, Length of 2nd element = 3, value of 1st element = 2
      1 + 3 = 4 & value 2. Returned result is "42" i.e. "Four 2s."
   */
}

// Itterate 40 times or 50 times // Part 1 and Part 2
for i = 1 to 50
{
   LookAndSayReg = LookAndSayStarter =~ %r/(\d)(\1{0,})/g
   LookAndSayStarter = join["",mapList[LASStr,LookAndSayReg]]
   if i == 40 // Part I
   {
      println["Length at 40 iterations: " + length[LookAndSayStarter]]
   }
}
println["Length at 50 iterations: " + length[LookAndSayStarter]] // Part II

end = now[]
println["Program run time: " + ((end - start)*1.0 -> "seconds")]