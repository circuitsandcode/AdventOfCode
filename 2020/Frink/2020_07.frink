// Solution for 2020 Day 7: Handy Haversacks
// https://adventofcode.com/2020/day/7
// Written in Frink by Chris Hansen
// Website: https://circuitsandcode.wehappyfew.net/
// Twitter: https://twitter.com/CircuitsAndCode
// Github: https://github.com/circuitsandcode
// MIT License: https://github.com/circuitsandcode/AdventOfCode/blob/master/LICENSE

// Comments added soon.

// Sample Input	
bagsInput = ["light red bags contain 1 bright white bag, 2 muted yellow bags.",
	"dark orange bags contain 3 bright white bags, 4 muted yellow bags.",
	"bright white bags contain 1 shiny gold bag.",
	"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.",
	"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.",
	"dark olive bags contain 3 faded blue bags, 4 dotted black bags.",
	"vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.",
	"faded blue bags contain no other bags.",
	"dotted black bags contain no other bags."]

bagsInput = readLines["file:../Projects/AdventOfCode/2020/InputFiles/2020_07_input.txt"]

bagsDict = new dict

for bags = bagsInput
{
	bagsKeyArr = bags =~ %r/^(.+) bags contain/
	bagsValue = bags =~ %r/(\d) (.*?) bag|bags[,|\.]/g
	bagsValue = flatten[bagsValue]
	if bagsValue@0 == undef
	{
		bagsValue = ["0","no other bags"]
	}
	bagsKey = bagsKeyArr@0
	//println[bagsKey]
	//println[bagsValue]
	bagsDict@bagsKey = bagsValue
}

//println[bagsDict]

bagSearch[bagDictSearch,bagSearch,bagsFound] :=
{
	for bagKey = bagDictSearch.keys[]
	{
		bagsContained = bagDictSearch@bagKey
		//println[bagsContained]
		if bagsContained.contains[bagSearch]
		{
			//println[bagKey]
			bagFound = bagSearch[bagDictSearch,bagKey,bagsFound]
			bagsFound.put[bagKey]
		}
	}
	return bagsFound
}

//println[bagSearch[bagsDict,"shiny gold"]]
x = new set
bagSearch[bagsDict,"shiny gold",x]
println["Part I: " + length[x]]


for bagKey = bagsDict.keys[]
{
	bagsContained = bagsDict@bagKey
	//println[bagsContained]
	//println[bagsDict@bagKey]
	bagsArr = new array
	for i = 0 to length[bagsContained] - 1 step 2
	{
		//println[bagsContained@i]
		bagValues = new array
		bagValues@0 = parseInt[bagsContained@i]
		bagValues@1 = bagsContained@(i+1)
		bagsArr.push[bagValues.shallowCopy[]]
	}
	bagsDict@bagKey = bagsArr
}

bagSearchDown[bagDictSearch,bagSearch] :=
{
	bagSum = 0
	bagsContained = bagDictSearch@bagSearch
	for bagContained = bagsContained
	{
		if bagContained@0 != 0
		{
			bagSum = bagSum + (bagSearchDown[bagDictSearch,bagContained@1] * bagContained@0) + bagContained@0
		}
	}
	return bagSum
}

println[bagSearchDown[bagsDict,"shiny gold"]]
