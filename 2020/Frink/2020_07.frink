// Solution for 2020 Day 7: Handy Haversacks
// https://adventofcode.com/2020/day/7
// Written in Frink by Chris Hansen
// Website: https://circuitsandcode.wehappyfew.net/
// Twitter: https://twitter.com/CircuitsAndCode
// Github: https://github.com/circuitsandcode
// MIT License: https://github.com/circuitsandcode/AdventOfCode/blob/master/LICENSE

// Load sample form responses and solutions.
bagsInput = ["light red bags contain 1 bright white bag, 2 muted yellow bags.",
	"dark orange bags contain 3 bright white bags, 4 muted yellow bags.",
	"bright white bags contain 1 shiny gold bag.",
	"muted yellow bags contain 2 shiny gold bags, 9 faded blue bags.",
	"shiny gold bags contain 1 dark olive bag, 2 vibrant plum bags.",
	"dark olive bags contain 3 faded blue bags, 4 dotted black bags.",
	"vibrant plum bags contain 5 faded blue bags, 6 dotted black bags.",
	"faded blue bags contain no other bags.",
	"dotted black bags contain no other bags."]

/*
// Sample solutions for reference. Nothing is done with these variables in the code.
sampleSolution1 = 4 // Solution to Part I for the sample input.
sampleSolution2 = 32 // Solution to Part II for the sample input.
*/

// Import the input file using the readLines function. This will import the file into an array.
// The input string is relative to my frink.jar file. Adjust this to the absolute or relative path with your input file.
// Note that the variable name is the same as the sample input again. Comment out this line to run the sample input.
bagsInput = readLines["file:../Projects/AdventOfCode/2020/InputFiles/2020_07_input.txt"]

// Create a dictionary to store the bag definitions. Then loop through the Regex results to populate the dictionary.
bagsDict = new dict

for bags = bagsInput
{
	// Use regex to get the individual components of the bag definition
	// name of the bag from the start of the string
	bagsKeyArr = bags =~ %r/^(.+) bags contain/
	// Capture the number and type of bags it can contain into an array divided on digit and bag name
	bagsValue = bags =~ %r/(\d) (.*?) bag|bags[,|\.]/g
	// Flatten the output of the regex from a nested array to a single array
	bagsValue = flatten[bagsValue]
	// Fill in the no other bags value - "no other bags" will not be found by the regex string above so instead will be retruend as undef
	if bagsValue@0 == undef
	{
		bagsValue = ["0","no other bags"]
	}
	// Fill in regex results in the dictionary
	bagsKey = bagsKeyArr@0
	bagsDict@bagsKey = bagsValue
}

// Create a function to recursively seatch through the entries of the bag dictionary and see what bags can contain your bag - either directly or several layers deep
bagSearch[bagDictSearch,bagReference,bagsFound] :=
{
	for bagKey = bagDictSearch.keys[]
	{
		bagsContained = bagDictSearch@bagKey
		if bagsContained.contains[bagReference]
		{
			// Use a recursive function to search through the containing bags for the bags that can contain them.
			// For example, in the sample input, the shiny gold bag can be contained in the bright white bags. This bag can be contained in the light red and dark orange bags.
			// We then need to search to see what bags can contain those bags.
			bagSearch[bagDictSearch,bagKey,bagsFound]
			// Put the results into a set. This will ensure uniqueness no matter how many times a bag might show up in the search. 
			bagsFound.put[bagKey]
		}
	}
	return bagsFound
}

// Create a set to store the final results for Part I
bagsFoundResult = new set
// Run the recursive function to search for your bag. The result will be the set of all distinct bags the answer is the length of that set.
bagSearch[bagsDict,"shiny gold",bagsFoundResult]
println["Part I: The total number of bags that can contain your bag are: " + length[bagsFoundResult]]

// Part II
// We need to rework the arrays in the bagsDict to be multidimensional arrays with an array for the number of each type of bag that bags can contain.
for bagKey = bagsDict.keys[]
{
	bagsContained = bagsDict@bagKey
	bagsArr = new array
	// Break apart the existing arrays i.e. [3, bright white, 4, muted yellow] into [[3, bright white],[,4, muted yellow]]
	for i = 0 to length[bagsContained] - 1 step 2
	{
		bagValues = new array
		bagValues@0 = parseInt[bagsContained@i]
		bagValues@1 = bagsContained@(i+1)
		bagsArr.push[bagValues.shallowCopy[]]
	}
	// Update the dictionary item with the multidimensional array
	bagsDict@bagKey = bagsArr
}

// Build a recursive function to drill down through the bags your bag can contain (and they bags those bags can contain).
bagSearchDown[bagDictSearch,bagSearch] :=
{
	bagSum = 0
	// Get the multidimensional array for each dictionary key.
	bagsContained = bagDictSearch@bagSearch
	// Parse each contained array.
	for bagContained = bagsContained
	{
		if bagContained@0 != 0
		{
			// If the bag can contain other bags, multiple the count of those bags and add to the bagSum total.
			// Each recrusive loop will add to that total and return the final result.
			bagSum = bagSum + (bagSearchDown[bagDictSearch,bagContained@1] * bagContained@0) + bagContained@0
		}
	}
	return bagSum
}

// Create a variable and run the recursive function to search for your bag. The result will be the set of all distinct bags the answer is the length of that set.
bagsContainedResult = bagSearchDown[bagsDict,"shiny gold"]
println["Part II: The total number of bags that your bag can contain are: " + bagsContainedResult]