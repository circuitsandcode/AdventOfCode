// Solution for 2020 Day 1: Report Repair
// https://adventofcode.com/2020/day/1
// Written in Frink by Chris Hansen
// Website: https://circuitsandcode.wehappyfew.net/
// Twitter: https://twitter.com/CircuitsAndCode
// Github: https://github.com/circuitsandcode
// MIT License: https://github.com/circuitsandcode/AdventOfCode/blob/master/LICENSE

start = now[]

// Prepare Sample Input
sampleInput = [1721,979,366,299,675,1456]
sampleSolution1 = 514579
sampleSolution2 = 241861950

// Create function for solving the puzzle. SampleSol
expense2020[report,comboLen,partNum,sampleSolution = 0] :=
{
	// Set reportProduct variable
	var reportProduct
	// Generate a list of all possible combinations of numbers from the report using the length provided
	reportCombos = report.combinations[comboLen]

	// Loop through the list looking for two values that add up to 2020
	for reportCombo = reportCombos
	{
		if sum[reportCombo] == 2020
		{
			// Display the values that add up to 2020. This is just for interesting reference and isn't needed in the solution.
			println["Part $partNum: The $comboLen values that equal 2020 are:"]
			for i = 1 to length[reportCombo]
			{
				println["Value $i: " + reportCombo@(i-1)]
			}
			// Calculate the value of each of those numbers multipled
			reportProduct = product[reportCombo]
			// Display the solution to the problem (all of those numbers multiplied by each other)
			println["Part $partNum: The sum of those numbers is: $reportProduct."]
			// Exit the loop. There is only one solution so no need to continue evaluating combinations.
			break
		}
	}
	// Testing sample solution
	if sampleSolution != 0
	{
	if sampleSolution == reportProduct
	{
		println["The Sample Solution is correct!"]
	} else
	{
		println["The Sample Solution is incorrect."]
	}
	}
	println[""]
}

// Test Sample Solutions
// Sample I
expense2020[sampleInput,2,"S1",sampleSolution1]
// Sample II
expense2020[sampleInput,3,"S2",sampleSolution2]

// Import the input file using the lines function. This will import the file into a enumeration.
// The input string is relative to my frink.jar file. Adjust this to the absolute or relative path with your input file.
// Convert the line enumeration into an array
reportInput = array[lines["file:../Projects/AdventOfCode/2020/InputFiles/2020_01_input.txt"]]

// Sizes are brought in as strings from the lines function. The parseInt function converts the values to interger.
counter = 0
for reportItem = reportInput
{
	reportInput@counter = parseInt[reportItem]
	counter = counter + 1
}

// Use function to solve Part I
expense2020[reportInput,2,"1"]

// Use function to solve Part II
expense2020[reportInput,3,"2"]

end = now[]
println["Program run time: " + ((end - start)*1.0 -> "seconds")]

// Original solution preserved below for reference.
/*
// Generate a list of all possible combinations of two numbers from the report
reportCombos = report.combinations[2]

// Loop through the list looking for two values that add up to 2020
for reportCombo = reportCombos
{
	if reportCombo@0 + reportCombo@1 == 2020
	{
		println["Part I: The two values that equal 2020 are " + reportCombo@0 + " and " + reportCombo@1 + ". The sum of them is: " + (reportCombo@0 * reportCombo@1)]
		break
	}
}

// Generate a list of all possible combinations of two numbers from the report
reportCombos = report.combinations[2]

// Loop through the list looking for two values that add up to 2020
for reportCombo = reportCombos
{
	if reportCombo@0 + reportCombo@1 == 2020
	{
		println["Part I: The two values that equal 2020 are " + reportCombo@0 + " and " + reportCombo@1 + ". The product of those numbers is: " + (reportCombo@0 * reportCombo@1)]
		break
	}
}
*/